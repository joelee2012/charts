# Default values for nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

maxConnections: 102400

env:
  - name: TZ
    value: Asia/Shanghai

upstreamServers:
  []
  # - name: upstream1
  #   address:
  #     - upstream_server:8081
  #   port: 8081
  #   verifyClient: true
  #   realIpFrom: 172.16.0.0/24
certs:
  {}
  # upstream1:
  #   tls.crt: xx
  #   tls.key: t
  #   ca.crt: xx

confTemplate: |
  log-format.conf.stream-template: |
    log_format proxy '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    access_log /var/log/nginx/access.log proxy;
    open_log_file_cache off;

  {{- range .Values.upstreamServers }}
  {{ .name }}.conf.stream-template: |
    upstream {{ .name }} {
      {{- range .address }}
        server {{ . }};
      {{- end }}
    }

    server {
        listen {{ .port }} ssl proxy_protocol;
        proxy_pass {{ .name }};
        {{ $cert := get $.Values.certs .name }}
        {{- if $cert }}
        ssl_certificate        /usr/local/{{ .name }}/certificates/tls.crt;
        ssl_certificate_key    /usr/local/{{ .name }}/certificates/tls.key;
        ssl_verify_depth 1;
        {{- if .verifyClient }}
        ssl_client_certificate /usr/local/{{ .name }}/certificates/ca.crt;
        ssl_verify_client on;
        {{- end }}
        {{- end }}
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        set_real_ip_from {{ .realIpFrom }};
        ssl_prefer_server_ciphers  on;
        proxy_connect_timeout 150s;
        proxy_timeout 150s;
        proxy_buffer_size 3M;
        proxy_protocol on;
        tcp_nodelay on;
      }
    {{- end }}

entryPointScripts:
  16-change-worker-connection.sh: |
    sed -ri '/worker_connections/s/\d+/{{ .Values.maxConnections }}/g' /etc/nginx/nginx.conf

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
